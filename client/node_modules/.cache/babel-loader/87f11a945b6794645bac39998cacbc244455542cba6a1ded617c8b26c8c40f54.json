{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\";\nconst API_URL = \"https://source.unsplash.com/random/800x600?people\";\nexport const useRandomImage = () => {\n  _s();\n  const [showUserImage, setShowUserImage] = useState(null);\n  const fetchRandomImage = async () => {\n    try {\n      const response = await axios.get(API_URL, {\n        responseType: \"arraybuffer\"\n      });\n      const data = Buffer.from(response.data, \"binary\").toString(\"base64\");\n      const imageUrl = `data:image/jpeg;base64,${data}`;\n      setShowUserImage(imageUrl);\n    } catch (error) {\n      console.error(\"Error fetching image:\", error);\n      toast.error(\"Erro ao buscar a imagem aleatória.\");\n    }\n  };\n  useEffect(() => {\n    fetchRandomImage();\n  }, []);\n  useEffect(() => {\n    console.log(\"showUserImage:\", showUserImage);\n  }, [showUserImage]);\n  return {\n    showUserImage,\n    fetchRandomImage\n  };\n};\n_s(useRandomImage, \"ZOjtf2jBp1NFYK6cIR0FYt3qpeM=\");","map":{"version":3,"names":["useState","useEffect","axios","toast","API_URL","useRandomImage","_s","showUserImage","setShowUserImage","fetchRandomImage","response","get","responseType","data","Buffer","from","toString","imageUrl","error","console","log"],"sources":["C:/Dev/Crud Sync360.io/client/src/hook/useRandomImage.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nconst API_URL = \"https://source.unsplash.com/random/800x600?people\";\r\n\r\nexport const useRandomImage = () => {\r\n  const [showUserImage, setShowUserImage] = useState(null);\r\n\r\n  const fetchRandomImage = async () => {\r\n    try {\r\n      const response = await axios.get(API_URL, { responseType: \"arraybuffer\" });\r\n      const data = Buffer.from(response.data, \"binary\").toString(\"base64\");\r\n      const imageUrl = `data:image/jpeg;base64,${data}`;\r\n      setShowUserImage(imageUrl);\r\n    } catch (error) {\r\n      console.error(\"Error fetching image:\", error);\r\n      toast.error(\"Erro ao buscar a imagem aleatória.\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchRandomImage();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(\"showUserImage:\", showUserImage);\r\n  }, [showUserImage]);\r\n\r\n  return { showUserImage, fetchRandomImage };\r\n};\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,QAAQ,gBAAgB;AACtC,MAAMC,OAAO,GAAG,mDAAmD;AAEnE,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAExD,MAAMS,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAG,CAACP,OAAO,EAAE;QAAEQ,YAAY,EAAE;MAAc,CAAC,CAAC;MAC1E,MAAMC,IAAI,GAAGC,MAAM,CAACC,IAAI,CAACL,QAAQ,CAACG,IAAI,EAAE,QAAQ,CAAC,CAACG,QAAQ,CAAC,QAAQ,CAAC;MACpE,MAAMC,QAAQ,GAAI,0BAAyBJ,IAAK,EAAC;MACjDL,gBAAgB,CAACS,QAAQ,CAAC;IAC5B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7Cf,KAAK,CAACe,KAAK,CAAC,oCAAoC,CAAC;IACnD;EACF,CAAC;EAEDjB,SAAS,CAAC,MAAM;IACdQ,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;EAENR,SAAS,CAAC,MAAM;IACdkB,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEb,aAAa,CAAC;EAC9C,CAAC,EAAE,CAACA,aAAa,CAAC,CAAC;EAEnB,OAAO;IAAEA,aAAa;IAAEE;EAAiB,CAAC;AAC5C,CAAC;AAACH,EAAA,CAxBWD,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}