{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\";\nconst API_URL = \"https://source.unsplash.com/random/800x600?people\";\nexport const useRandomImage = () => {\n  _s();\n  const [imageUrl, setImageUrl] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false); // Adicionado estado para controle de carregamento\n\n  const fetchRandomImage = async () => {\n    try {\n      const response = await axios.get(`${API_URL}`);\n      setImageUrl(response.data.url);\n      setIsLoaded(true); // Atualiza o estado quando a imagem é carregada\n    } catch (error) {\n      console.error(\"Error fetching image:\", error);\n      toast.error(\"Erro ao buscar a imagem aleatória.\");\n    }\n  };\n  useEffect(() => {\n    fetchRandomImage();\n  }, []);\n  return {\n    imageUrl,\n    isLoaded\n  }; // Retorna ambos os estados\n};\n_s(useRandomImage, \"l1ci/DAGTUeGJNimuYST7Xehhaw=\");","map":{"version":3,"names":["useState","useEffect","axios","toast","API_URL","useRandomImage","_s","imageUrl","setImageUrl","isLoaded","setIsLoaded","fetchRandomImage","response","get","data","url","error","console"],"sources":["C:/Dev/Crud Sync360.io/client/src/hook/useRandomImage.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst API_URL = \"https://source.unsplash.com/random/800x600?people\";\r\n\r\nexport const useRandomImage = () => {\r\n  const [imageUrl, setImageUrl] = useState(null);\r\n  const [isLoaded, setIsLoaded] = useState(false); // Adicionado estado para controle de carregamento\r\n\r\n  const fetchRandomImage = async () => {\r\n    try {\r\n      const response = await axios.get(`${API_URL}`);\r\n      setImageUrl(response.data.url);\r\n      setIsLoaded(true); // Atualiza o estado quando a imagem é carregada\r\n    } catch (error) {\r\n      console.error(\"Error fetching image:\", error);\r\n      toast.error(\"Erro ao buscar a imagem aleatória.\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchRandomImage();\r\n  }, []);\r\n\r\n  return { imageUrl, isLoaded }; // Retorna ambos os estados\r\n};\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,QAAQ,gBAAgB;AAEtC,MAAMC,OAAO,GAAG,mDAAmD;AAEnE,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAEjD,MAAMW,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAE,GAAET,OAAQ,EAAC,CAAC;MAC9CI,WAAW,CAACI,QAAQ,CAACE,IAAI,CAACC,GAAG,CAAC;MAC9BL,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;IACrB,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7Cb,KAAK,CAACa,KAAK,CAAC,oCAAoC,CAAC;IACnD;EACF,CAAC;EAEDf,SAAS,CAAC,MAAM;IACdU,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEJ,QAAQ;IAAEE;EAAS,CAAC,CAAC,CAAC;AACjC,CAAC;AAACH,EAAA,CApBWD,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}