{"ast":null,"code":"import axios from \"axios\";\nimport { toast } from \"react-toastify\";\nexport const getUsers = async () => {\n  try {\n    const response = await axios.get(\"http://localhost:8800\");\n    console.log(response);\n    return response.data;\n  } catch (error) {\n    toast.error(error);\n    throw error;\n  }\n};\n\n// import axios from 'axios'\n// const API_URL = \"http://localhost:3000/api/owners\"\n// import { IOwner } from '../Interfaces/Owner'\n// import { IPet } from '../Interfaces/Pet'\n// //Create Owner\n// export const createOwner = async (ownerData: IOwner): Promise<IOwner> => {\n//     try {\n//         const response = await axios.post(`${API_URL}/create-new-owner`, ownerData)\n//         return response.data as IOwner\n//     } catch (error) {\n//         console.error('Erro ao criar proprietário:', error);\n//         throw error;\n//     }\n// }\n// //Read all Owner\n// export const getAllOwners = async (): Promise<IOwner[]> => {\n//     try {\n//         const response = await axios.get(`${API_URL}/`);\n//         return response.data as IOwner[];\n//     } catch (error) {\n//         console.error('Erro ao buscar proprietários:', error);\n//         throw error;\n//     }\n// };\n// //Read One Owner\n// export const getOneOwner = async (id: string): Promise<IOwner | null> => {\n//     try {\n//         const response = await axios.get(`${API_URL}/${id}`);\n//         return response.data as IOwner;\n//     } catch (error) {\n//         console.error('Erro ao buscar proprietário:', error);\n//         return null;\n//     }\n// };\n// //Update on Owner\n// export const updateOwner = async (id: string, updatedData: Partial<IOwner>): Promise<IOwner> => {\n//     try {\n//         const response = await axios.put(`${API_URL}/${id}`, updatedData);\n//         return response.data as IOwner;\n//     } catch (error) {\n//         console.error('Erro ao atualizar proprietário:', error);\n//         throw error;\n//     }\n// };\n// //Delete one Owner\n// export const deleteOwner = async (id: string): Promise<void> => {\n//     try {\n//         await axios.delete(`${API_URL}/${id}`);\n//     } catch (error) {\n//         console.error('Erro ao deletar proprietário:', error);\n//         throw error;\n//     }\n// };\n// //Read all pets of Owner\n// export const getAllPetsOfOwner = async (id: string): Promise<IPet[]> => {\n//     try {\n//         const response = await axios.get(`${API_URL}/${id}/pets`);\n//         return response.data as IPet[];\n//     } catch (error) {\n//         console.error('Erro ao buscar pets do proprietário:', error);\n//         throw error;\n//     }\n// };","map":{"version":3,"names":["axios","toast","getUsers","response","get","console","log","data","error"],"sources":["C:/Dev/Crud Sync360.io/client/src/services/api.jsx"],"sourcesContent":["import axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nexport const getUsers = async () => {\r\n  try {\r\n    const response = await axios.get(\"http://localhost:8800\");\r\n    console.log(response)\r\n    return response.data;\r\n  } catch (error) {\r\n    toast.error(error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// import axios from 'axios'\r\n// const API_URL = \"http://localhost:3000/api/owners\"\r\n// import { IOwner } from '../Interfaces/Owner'\r\n// import { IPet } from '../Interfaces/Pet'\r\n// //Create Owner\r\n// export const createOwner = async (ownerData: IOwner): Promise<IOwner> => {\r\n//     try {\r\n//         const response = await axios.post(`${API_URL}/create-new-owner`, ownerData)\r\n//         return response.data as IOwner\r\n//     } catch (error) {\r\n//         console.error('Erro ao criar proprietário:', error);\r\n//         throw error;\r\n//     }\r\n// }\r\n// //Read all Owner\r\n// export const getAllOwners = async (): Promise<IOwner[]> => {\r\n//     try {\r\n//         const response = await axios.get(`${API_URL}/`);\r\n//         return response.data as IOwner[];\r\n//     } catch (error) {\r\n//         console.error('Erro ao buscar proprietários:', error);\r\n//         throw error;\r\n//     }\r\n// };\r\n// //Read One Owner\r\n// export const getOneOwner = async (id: string): Promise<IOwner | null> => {\r\n//     try {\r\n//         const response = await axios.get(`${API_URL}/${id}`);\r\n//         return response.data as IOwner;\r\n//     } catch (error) {\r\n//         console.error('Erro ao buscar proprietário:', error);\r\n//         return null;\r\n//     }\r\n// };\r\n// //Update on Owner\r\n// export const updateOwner = async (id: string, updatedData: Partial<IOwner>): Promise<IOwner> => {\r\n//     try {\r\n//         const response = await axios.put(`${API_URL}/${id}`, updatedData);\r\n//         return response.data as IOwner;\r\n//     } catch (error) {\r\n//         console.error('Erro ao atualizar proprietário:', error);\r\n//         throw error;\r\n//     }\r\n// };\r\n// //Delete one Owner\r\n// export const deleteOwner = async (id: string): Promise<void> => {\r\n//     try {\r\n//         await axios.delete(`${API_URL}/${id}`);\r\n//     } catch (error) {\r\n//         console.error('Erro ao deletar proprietário:', error);\r\n//         throw error;\r\n//     }\r\n// };\r\n// //Read all pets of Owner\r\n// export const getAllPetsOfOwner = async (id: string): Promise<IPet[]> => {\r\n//     try {\r\n//         const response = await axios.get(`${API_URL}/${id}/pets`);\r\n//         return response.data as IPet[];\r\n//     } catch (error) {\r\n//         console.error('Erro ao buscar pets do proprietário:', error);\r\n//         throw error;\r\n//     }\r\n// };\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,QAAQ,gBAAgB;AAEtC,OAAO,MAAMC,QAAQ,GAAG,MAAAA,CAAA,KAAY;EAClC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,uBAAuB,CAAC;IACzDC,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;IACrB,OAAOA,QAAQ,CAACI,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdP,KAAK,CAACO,KAAK,CAACA,KAAK,CAAC;IAClB,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}