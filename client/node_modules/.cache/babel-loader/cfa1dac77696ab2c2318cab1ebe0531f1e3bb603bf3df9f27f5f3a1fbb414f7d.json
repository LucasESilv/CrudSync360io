{"ast":null,"code":"var _jsxFileName = \"C:\\\\Dev\\\\Crud Sync360.io\\\\client\\\\src\\\\components\\\\Header.jsx\",\n  _s = $RefreshSig$();\nimport { Button, Container } from \"react-bootstrap\";\nimport { useContext } from \"react\";\nimport { AppContext } from \"./AppContextProvider\";\nimport { FormsModal } from \"./FormsAdd.jsx\";\nimport { TableUsers } from \"./Tables.jsx\";\nimport { useRandomImage } from \"../hook/useRandomImage.jsx\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const HeaderComponent = () => {\n  _s();\n  const {\n    setShowModalForm,\n    setShowUserImage\n  } = useContext(AppContext);\n  const {\n    imageUrl,\n    isLoaded\n  } = useRandomImage(); // Desestruturação para acessar ambos os estados\n\n  const openModalForm = () => {\n    if (isLoaded) {\n      // Verifica se a imagem foi carregada\n      setShowUserImage(imageUrl);\n      setShowModalForm(true);\n      console.log(\"Image URL:\", imageUrl);\n    } else {\n      console.log(\"Imagem ainda não carregada\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      className: \"d-flex flex-column justify-content-center \",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        onClick: openModalForm,\n        children: \"Open Modal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), isLoaded && /*#__PURE__*/_jsxDEV(FormsModal, {\n        showUserImage: imageUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 22\n      }, this), \" \", /*#__PURE__*/_jsxDEV(TableUsers, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(HeaderComponent, \"Ri7Kqy/JnL+hxD759Qg+PjCxKFE=\", false, function () {\n  return [useRandomImage];\n});\n_c = HeaderComponent;\nvar _c;\n$RefreshReg$(_c, \"HeaderComponent\");","map":{"version":3,"names":["Button","Container","useContext","AppContext","FormsModal","TableUsers","useRandomImage","jsxDEV","_jsxDEV","Fragment","_Fragment","HeaderComponent","_s","setShowModalForm","setShowUserImage","imageUrl","isLoaded","openModalForm","console","log","children","className","variant","onClick","fileName","_jsxFileName","lineNumber","columnNumber","showUserImage","_c","$RefreshReg$"],"sources":["C:/Dev/Crud Sync360.io/client/src/components/Header.jsx"],"sourcesContent":["import { Button, Container } from \"react-bootstrap\";\r\nimport { useContext } from \"react\";\r\nimport { AppContext } from \"./AppContextProvider\";\r\nimport { FormsModal } from \"./FormsAdd.jsx\";\r\nimport { TableUsers } from \"./Tables.jsx\";\r\nimport { useRandomImage } from \"../hook/useRandomImage.jsx\";\r\n\r\nexport const HeaderComponent = () => {\r\n  const { setShowModalForm, setShowUserImage } = useContext(AppContext);\r\n  const { imageUrl, isLoaded } = useRandomImage(); // Desestruturação para acessar ambos os estados\r\n\r\n  const openModalForm = () => {\r\n    if (isLoaded) { // Verifica se a imagem foi carregada\r\n      setShowUserImage(imageUrl);\r\n      setShowModalForm(true);\r\n      console.log(\"Image URL:\", imageUrl);\r\n    } else {\r\n      console.log(\"Imagem ainda não carregada\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container className=\"d-flex flex-column justify-content-center \">\r\n        <Button variant=\"primary\" onClick={openModalForm}>\r\n          Open Modal\r\n        </Button>\r\n        {isLoaded && <FormsModal showUserImage={imageUrl} />} {/* Renderiza o modal apenas se a imagem estiver carregada */}\r\n        <TableUsers />\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,SAASA,MAAM,EAAEC,SAAS,QAAQ,iBAAiB;AACnD,SAASC,UAAU,QAAQ,OAAO;AAClC,SAASC,UAAU,QAAQ,sBAAsB;AACjD,SAASC,UAAU,QAAQ,gBAAgB;AAC3C,SAASC,UAAU,QAAQ,cAAc;AACzC,SAASC,cAAc,QAAQ,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE5D,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnC,MAAM;IAAEC,gBAAgB;IAAEC;EAAiB,CAAC,GAAGZ,UAAU,CAACC,UAAU,CAAC;EACrE,MAAM;IAAEY,QAAQ;IAAEC;EAAS,CAAC,GAAGV,cAAc,CAAC,CAAC,CAAC,CAAC;;EAEjD,MAAMW,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAID,QAAQ,EAAE;MAAE;MACdF,gBAAgB,CAACC,QAAQ,CAAC;MAC1BF,gBAAgB,CAAC,IAAI,CAAC;MACtBK,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEJ,QAAQ,CAAC;IACrC,CAAC,MAAM;MACLG,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;IAC3C;EACF,CAAC;EAED,oBACEX,OAAA,CAAAE,SAAA;IAAAU,QAAA,eACEZ,OAAA,CAACP,SAAS;MAACoB,SAAS,EAAC,4CAA4C;MAAAD,QAAA,gBAC/DZ,OAAA,CAACR,MAAM;QAACsB,OAAO,EAAC,SAAS;QAACC,OAAO,EAAEN,aAAc;QAAAG,QAAA,EAAC;MAElD;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EACRX,QAAQ,iBAAIR,OAAA,CAACJ,UAAU;QAACwB,aAAa,EAAEb;MAAS;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EAAC,GAAC,eACtDnB,OAAA,CAACH,UAAU;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC,gBACZ,CAAC;AAEP,CAAC;AAACf,EAAA,CAzBWD,eAAe;EAAA,QAEKL,cAAc;AAAA;AAAAuB,EAAA,GAFlClB,eAAe;AAAA,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}