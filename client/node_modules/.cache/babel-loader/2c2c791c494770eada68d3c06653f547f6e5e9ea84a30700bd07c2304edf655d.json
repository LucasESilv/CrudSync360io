{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { updateUser } from \"../services/api\";\nexport const useUpdateUser = () => {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const updateUserHandler = async (id, userData) => {\n    setIsLoading(true);\n    try {\n      await updateUser(userData, id);\n    } catch (error) {\n      setError(error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return {\n    isLoading,\n    error,\n    updateUserHandler\n  };\n};\n_s(useUpdateUser, \"vj++RuHna9NxFPGCY0p/mi1GZNM=\");","map":{"version":3,"names":["useState","updateUser","useUpdateUser","_s","isLoading","setIsLoading","error","setError","updateUserHandler","id","userData"],"sources":["C:/Dev/Crud Sync360.io/client/src/hook/useUpdateUsers.jsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport { updateUser } from \"../services/api\";\r\n\r\nexport const useUpdateUser = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const updateUserHandler = async (id, userData) => {\r\n    setIsLoading(true);\r\n    try {\r\n      await updateUser(userData, id);\r\n    } catch (error) {\r\n      setError(error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n  return { isLoading, error, updateUserHandler };\r\n};\r\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,UAAU,QAAQ,iBAAiB;AAE5C,OAAO,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGL,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACM,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMQ,iBAAiB,GAAG,MAAAA,CAAOC,EAAE,EAAEC,QAAQ,KAAK;IAChDL,YAAY,CAAC,IAAI,CAAC;IAClB,IAAI;MACF,MAAMJ,UAAU,CAACS,QAAQ,EAAED,EAAE,CAAC;IAChC,CAAC,CAAC,OAAOH,KAAK,EAAE;MACdC,QAAQ,CAACD,KAAK,CAAC;IACjB,CAAC,SAAS;MACRD,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EACD,OAAO;IAAED,SAAS;IAAEE,KAAK;IAAEE;EAAkB,CAAC;AAChD,CAAC;AAACL,EAAA,CAfWD,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}